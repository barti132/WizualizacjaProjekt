# -*- coding: utf-8 -*-
"""Kopia notatnika Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nO0UxjQ3IkZUo289AmiYEebicoPxqnr2
"""

import pandas as pd
import requests

df = pd.read_csv('billboard-data.csv')
df['week timestamp'] = pd.to_datetime(df['week timestamp'])
df.columns = df.columns.map(lambda x: x.replace(' ', '_'))
df = df.rename(columns={'arist_name': 'artist_name'})

print(df.head(10))

genres_cache = {}
song_cache = {}

not_found = set({})

api_headers = {
    'Accept': 'application/json',
    'Content-Type': 'application/json',
    'Authorization': 'Bearer BQAp79ATwOHQwRlqJRpaVWUwrg5N-eSLbAwyS2RB8BcGx-krUw9KWMx5bPUt66Mlp0hTrGwxthAHFcYQsFDeL19MMy9VAuZVS_sBy47IJ3i5MdwoJz-DmARq1VSN6jhDudENVs4UVnZ95Va0OFqPpxpZ5qBIHV2e6gI',
}


def params(q: str, search: str):
    return {
        'q': q,
        'type': search
    }


def process_query_string(query_string: str):
    query_string = query_string.lower()
    query_string = query_string.replace('&', '')

    index = query_string.find('featuring')
    if index > -1:
        query_string = query_string[:index]

    index = query_string.find('with')
    if index > -1:
        query_string = query_string[:index]

    index = query_string.find('and')
    if index > -1:
        query_string = query_string[:index]

    return query_string


def search_for_song(song_name: str):
    if song_name in song_cache and song_cache[song_name] is not None:
        return song_cache[song_name]

    response = requests.get('https://api.spotify.com/v1/search', params=params(song_name, 'track'), headers=api_headers)

    song = None
    try:
        song = response.json()['tracks']['items'][0]
        if 'error' in song:
            raise Exception(song['error'])


    except Exception as e:
        song_cache[song_name] = None

        return None

    artists = song['artists']
    song_cache[song_name] = artists

    return artists


def get_artist_genre(spotify_uri: str):
    if spotify_uri in genres_cache:
        return genres_cache[spotify_uri]

    response = requests.get(f'https://api.spotify.com/v1/artists/{spotify_uri}', headers=api_headers)

    if response.ok == False:
        print(spotify_uri)
        print(response.status_code)
        raise Exception("Wrong response")

    data = response.json()['genres']
    genres_cache[spotify_uri] = data

    return data


data = []
i = 0
count = len(df.index)
for index, row in df.iterrows():
    if index % 5000 == 0:
        print(index / count)

    artists = search_for_song(row['track_name'] + ' ' + process_query_string(row['artist_name']))
    genres = []
    uri = None

    if artists is not None:
        uri = artists[0]['id']
        genres = get_artist_genre(uri)
        genres.sort(key=lambda x: x.count(' '), reverse=False)

    data.append({'artist_uri': uri, 'genres': str(genres)})


new_df = pd.read_csv('../genres_1.csv')

print(new_df.head(10))

new_df.to_csv('genres_1.csv')

concated = pd.concat([df, new_df], axis=1)

concated.to_csv('concated.csv')

print(concated.head(10))


concated['artist_uri'] = concated['artist_uri'].replace('None', '')

found = concated[concated['artist_uri'].str.contains('Ee')]
print(found.count())

